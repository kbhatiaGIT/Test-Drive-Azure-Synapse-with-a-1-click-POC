{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "cmpnbnmosngz7ou2pocws1"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDataLakeStorage2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage2'"
		},
		"TripFaresSynapseAnalyticsLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'TripFaresSynapseAnalyticsLinkedService'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://cmpnbnmosngz7ou2poc.dfs.core.windows.net/"
		},
		"AzureDataLakeStorage2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://cmpnbnmosngz7ou2poc.dfs.core.windows.net/"
		},
		"HttpServerTripDataLinkedService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com/Azure/Test-Drive-Azure-Synapse-with-a-1-click-POC/main/tripDataAndFaresCSV/trip-data.csv"
		},
		"HttpServerTripFareDataLinkedService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com/Azure/Test-Drive-Azure-Synapse-with-a-1-click-POC/main/tripDataAndFaresCSV/fares-data.csv"
		},
		"TripFaresDataLakeStorageLinkedService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{concat('https://',linkedService().datalakeAccountName,'.dfs.core.windows.net')}"
		},
		"keyVaultLinkedservice_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "@{concat('https://',linkedService().keyVaultName,'.vault.azure.net/')}"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/MappingDemo')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "DataFlow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureDataLakeStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": "public/MappingDemooutput"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dataflow1')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TripFaresDataPipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "IngestTripDataIntoADLS",
						"description": "Copies the trip data csv file from the git repo and loads it into the ADLS.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "tripsDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tripDataSink",
								"type": "DatasetReference",
								"parameters": {
									"datalakeAccountName": {
										"value": "@pipeline().parameters.datalakeAccountName",
										"type": "Expression"
									},
									"keyVaultName": {
										"value": "@pipeline().parameters.KeyVaultName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "IngestTripFaresDataIntoADLS",
						"description": "Copies the trip fare data csv file from the git repo and loads it into the ADLS.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "faresDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "faresDataSink",
								"type": "DatasetReference",
								"parameters": {
									"keyVaultName": {
										"value": "@pipeline().parameters.KeyVaultName",
										"type": "Expression"
									},
									"datalakeAccountName": {
										"value": "@pipeline().parameters.datalakeAccountName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "JoinAndAggregateData",
						"description": "Reads the raw data from both CSV files inside the ADLS, performs the desired transformations (inner join and aggregation) and writes the transformed data into the synapse SQL pool.",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Create Schema If Does Not Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "tripFaresDataTransformations",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TripDataCSV": {
										"datalakeAccountName": {
											"value": "@pipeline().parameters.datalakeAccountName",
											"type": "Expression"
										},
										"keyVaultName": {
											"value": "@pipeline().parameters.KeyVaultName",
											"type": "Expression"
										}
									},
									"FaresDataCSV": {
										"keyVaultName": {
											"value": "@pipeline().parameters.KeyVaultName",
											"type": "Expression"
										},
										"datalakeAccountName": {
											"value": "@pipeline().parameters.datalakeAccountName",
											"type": "Expression"
										}
									},
									"SynapseAnalyticsSink": {
										"SchemaName": {
											"value": "@pipeline().parameters.SchemaName",
											"type": "Expression"
										},
										"SynapseWorkspaceName": {
											"value": "@pipeline().parameters.SynapseWorkspaceName",
											"type": "Expression"
										},
										"SQLDedicatedPoolName": {
											"value": "@pipeline().parameters.SQLDedicatedPoolName",
											"type": "Expression"
										},
										"keyVaultName": {
											"value": "@pipeline().parameters.KeyVaultName",
											"type": "Expression"
										},
										"SQLLoginUsername": {
											"value": "@pipeline().parameters.SQLLoginUsername",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Create Schema If Does Not Exists",
						"description": "Creates the schema inside the SQL dedicated pool. Shema name comes from the pipeline parameter 'SchemaName'.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "IngestTripDataIntoADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "IngestTripFaresDataIntoADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": {
									"value": "IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '@{pipeline().parameters.SchemaName}')\nBEGIN\nEXEC('CREATE SCHEMA @{pipeline().parameters.SchemaName}')\nselect Count(*) from sys.symmetric_keys;\nEND\nELSE\nBEGIN\n    select Count(*) from sys.symmetric_keys;\nEND",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azureSynapseAnalyticsSchema",
								"type": "DatasetReference",
								"parameters": {
									"SynapseWorkspaceName": {
										"value": "@pipeline().parameters.SynapseWorkspaceName",
										"type": "Expression"
									},
									"SQLDedicatedPoolName": {
										"value": "@pipeline().parameters.SQLDedicatedPoolName",
										"type": "Expression"
									},
									"keyVaultName": {
										"value": "@pipeline().parameters.KeyVaultName",
										"type": "Expression"
									},
									"SQLLoginUsername": {
										"value": "@pipeline().parameters.SQLLoginUsername",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy data Trips Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Create Schema If Does Not Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": "IF (EXISTS (SELECT *\n  FROM INFORMATION_SCHEMA.TABLES\n  WHERE TABLE_SCHEMA = 'dbo'\n  AND TABLE_NAME = 'TripsData'))\nBEGIN \n   Truncate table TripsData;\nEnd\n",
								"allowPolyBase": true,
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "TripFaresDataLakeStorageLinkedService",
									"type": "LinkedServiceReference",
									"parameters": {
										"keyVaultName": {
											"value": "@pipeline().parameters.KeyVaultName",
											"type": "Expression"
										},
										"datalakeAccountName": {
											"value": "@pipeline().parameters.datalakeAccountName",
											"type": "Expression"
										}
									}
								}
							}
						},
						"inputs": [
							{
								"referenceName": "tripsDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseAnalyticsTripsData",
								"type": "DatasetReference",
								"parameters": {
									"SynapseWorkspaceName": {
										"value": "@pipeline().parameters.SynapseWorkspaceName",
										"type": "Expression"
									},
									"SQLDedicatedPoolName": {
										"value": "@pipeline().parameters.SQLDedicatedPoolName",
										"type": "Expression"
									},
									"keyVaultName": {
										"value": "@pipeline().parameters.KeyVaultName",
										"type": "Expression"
									},
									"SQLLoginUsername": {
										"value": "@pipeline().parameters.SQLLoginUsername",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy data Fares Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Create Schema If Does Not Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": "IF (EXISTS (SELECT *\n  FROM INFORMATION_SCHEMA.TABLES\n  WHERE TABLE_SCHEMA = 'dbo'\n  AND TABLE_NAME = 'FaresData'))\nBEGIN \n   Truncate table FaresData;\nEnd\n",
								"allowPolyBase": true,
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "TripFaresDataLakeStorageLinkedService",
									"type": "LinkedServiceReference",
									"parameters": {
										"keyVaultName": {
											"value": "@pipeline().parameters.KeyVaultName",
											"type": "Expression"
										},
										"datalakeAccountName": {
											"value": "@pipeline().parameters.datalakeAccountName",
											"type": "Expression"
										}
									}
								}
							}
						},
						"inputs": [
							{
								"referenceName": "faresDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseAnalyticsFaresData",
								"type": "DatasetReference",
								"parameters": {
									"SynapseWorkspaceName": {
										"value": "@pipeline().parameters.SynapseWorkspaceName",
										"type": "Expression"
									},
									"SQLDedicatedPoolName": {
										"value": "@pipeline().parameters.SQLDedicatedPoolName",
										"type": "Expression"
									},
									"keyVaultName": {
										"value": "@pipeline().parameters.KeyVaultName",
										"type": "Expression"
									},
									"SQLLoginUsername": {
										"value": "@pipeline().parameters.SQLLoginUsername",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SchemaName": {
						"type": "string",
						"defaultValue": "tripFares"
					},
					"SynapseWorkspaceName": {
						"type": "string",
						"defaultValue": "cmpnbnmosngz7ou2pocws1.database.windows.net"
					},
					"SQLDedicatedPoolName": {
						"type": "string",
						"defaultValue": "cmpnbnmosngz7ou2pocws1p1"
					},
					"SQLLoginUsername": {
						"type": "string",
						"defaultValue": "sqladmin"
					},
					"KeyVaultName": {
						"type": "string",
						"defaultValue": "kvcmpnbnmosngz7ou2poc"
					},
					"datalakeAccountName": {
						"type": "string",
						"defaultValue": "cmpnbnmosngz7ou2poc"
					}
				},
				"folder": {
					"name": "TripFaresDataPipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/tripsDataSource')]",
				"[concat(variables('workspaceId'), '/datasets/tripDataSink')]",
				"[concat(variables('workspaceId'), '/datasets/faresDataSource')]",
				"[concat(variables('workspaceId'), '/datasets/faresDataSink')]",
				"[concat(variables('workspaceId'), '/dataflows/tripFaresDataTransformations')]",
				"[concat(variables('workspaceId'), '/datasets/azureSynapseAnalyticsSchema')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTripsData')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsFaresData')]",
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresDataLakeStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalyticsFaresData')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"SynapseWorkspaceName": {
							"value": "@dataset().SynapseWorkspaceName",
							"type": "Expression"
						},
						"SQLDedicatedPoolName": {
							"value": "@dataset().SQLDedicatedPoolName",
							"type": "Expression"
						},
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"SQLLoginUsername": {
							"value": "@dataset().SQLLoginUsername",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SynapseWorkspaceName": {
						"type": "string"
					},
					"SQLDedicatedPoolName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					},
					"SQLLoginUsername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"table": "FaresData"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalyticsTable1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalyticsTable2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"SynapseWorkspaceName": "cmpnbnmosngz7ou2pocws1.database.windows.net",
						"SQLDedicatedPoolName": "cmpnbnmosngz7ou2pocws1p1",
						"keyVaultName": "kvcmpnbnmosngz7ou2poc",
						"SQLLoginUsername": "sqladmin"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Mapping"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalyticsTripsData')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"SynapseWorkspaceName": {
							"value": "@dataset().SynapseWorkspaceName",
							"type": "Expression"
						},
						"SQLDedicatedPoolName": {
							"value": "@dataset().SQLDedicatedPoolName",
							"type": "Expression"
						},
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"SQLLoginUsername": {
							"value": "@dataset().SQLLoginUsername",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SynapseWorkspaceName": {
						"type": "string"
					},
					"SQLDedicatedPoolName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					},
					"SQLLoginUsername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"table": "TripsData"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Excel1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "england_ks2final",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "england_ks2final.xlsx",
						"folderPath": "MappingDemo",
						"fileSystem": "public"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "RECTYPE",
						"type": "String"
					},
					{
						"name": "ALPHAIND",
						"type": "String"
					},
					{
						"name": "LEA",
						"type": "String"
					},
					{
						"name": "ESTAB",
						"type": "String"
					},
					{
						"name": "URN",
						"type": "String"
					},
					{
						"name": "SCHNAME",
						"type": "String"
					},
					{
						"name": "ADDRESS1",
						"type": "String"
					},
					{
						"name": "ADDRESS2",
						"type": "String"
					},
					{
						"name": "ADDRESS3",
						"type": "String"
					},
					{
						"name": "TOWN",
						"type": "String"
					},
					{
						"name": "PCODE",
						"type": "String"
					},
					{
						"name": "TELNUM",
						"type": "String"
					},
					{
						"name": "PCON_CODE",
						"type": "String"
					},
					{
						"name": "PCON_NAME",
						"type": "String"
					},
					{
						"name": "URN_AC",
						"type": "String"
					},
					{
						"name": "SCHNAME_AC",
						"type": "String"
					},
					{
						"name": "OPEN_AC",
						"type": "String"
					},
					{
						"name": "NFTYPE",
						"type": "String"
					},
					{
						"name": "ICLOSE",
						"type": "String"
					},
					{
						"name": "RELDENOM",
						"type": "String"
					},
					{
						"name": "AGERANGE",
						"type": "String"
					},
					{
						"name": "CONFEXAM",
						"type": "String"
					},
					{
						"name": "TAB15",
						"type": "String"
					},
					{
						"name": "TAB1618",
						"type": "String"
					},
					{
						"name": "TOTPUPS",
						"type": "String"
					},
					{
						"name": "TPUPYEAR",
						"type": "String"
					},
					{
						"name": "TELIG",
						"type": "String"
					},
					{
						"name": "BELIG",
						"type": "String"
					},
					{
						"name": "GELIG",
						"type": "String"
					},
					{
						"name": "PBELIG",
						"type": "String"
					},
					{
						"name": "PGELIG",
						"type": "String"
					},
					{
						"name": "TKS1AVERAGE",
						"type": "String"
					},
					{
						"name": "TKS1GROUP_L",
						"type": "String"
					},
					{
						"name": "PTKS1GROUP_L",
						"type": "String"
					},
					{
						"name": "TKS1GROUP_M",
						"type": "String"
					},
					{
						"name": "PTKS1GROUP_M",
						"type": "String"
					},
					{
						"name": "TKS1GROUP_H",
						"type": "String"
					},
					{
						"name": "PTKS1GROUP_H",
						"type": "String"
					},
					{
						"name": "TKS1GROUP_NA",
						"type": "String"
					},
					{
						"name": "PTKS1GROUP_NA",
						"type": "String"
					},
					{
						"name": "TFSM6CLA1A",
						"type": "String"
					},
					{
						"name": "PTFSM6CLA1A",
						"type": "String"
					},
					{
						"name": "TNotFSM6CLA1A",
						"type": "String"
					},
					{
						"name": "PTNotFSM6CLA1A",
						"type": "String"
					},
					{
						"name": "TEALGRP2",
						"type": "String"
					},
					{
						"name": "PTEALGRP2",
						"type": "String"
					},
					{
						"name": "TMOBN",
						"type": "String"
					},
					{
						"name": "PTMOBN",
						"type": "String"
					},
					{
						"name": "PTRWM_EXP",
						"type": "String"
					},
					{
						"name": "PTRWM_HIGH",
						"type": "String"
					},
					{
						"name": "READPROG",
						"type": "String"
					},
					{
						"name": "READPROG_LOWER",
						"type": "String"
					},
					{
						"name": "READPROG_UPPER",
						"type": "String"
					},
					{
						"name": "READCOV",
						"type": "String"
					},
					{
						"name": "WRITPROG",
						"type": "String"
					},
					{
						"name": "WRITPROG_LOWER",
						"type": "String"
					},
					{
						"name": "WRITPROG_UPPER",
						"type": "String"
					},
					{
						"name": "WRITCOV",
						"type": "String"
					},
					{
						"name": "MATPROG",
						"type": "String"
					},
					{
						"name": "MATPROG_LOWER",
						"type": "String"
					},
					{
						"name": "MATPROG_UPPER",
						"type": "String"
					},
					{
						"name": "MATCOV",
						"type": "String"
					},
					{
						"name": "PTREAD_EXP",
						"type": "String"
					},
					{
						"name": "PTREAD_HIGH",
						"type": "String"
					},
					{
						"name": "PTREAD_AT",
						"type": "String"
					},
					{
						"name": "READ_AVERAGE",
						"type": "String"
					},
					{
						"name": "PTGPS_EXP",
						"type": "String"
					},
					{
						"name": "PTGPS_HIGH",
						"type": "String"
					},
					{
						"name": "PTGPS_AT",
						"type": "String"
					},
					{
						"name": "GPS_AVERAGE",
						"type": "String"
					},
					{
						"name": "PTMAT_EXP",
						"type": "String"
					},
					{
						"name": "PTMAT_HIGH",
						"type": "String"
					},
					{
						"name": "PTMAT_AT",
						"type": "String"
					},
					{
						"name": "MAT_AVERAGE",
						"type": "String"
					},
					{
						"name": "PTWRITTA_EXP",
						"type": "String"
					},
					{
						"name": "PTWRITTA_HIGH",
						"type": "String"
					},
					{
						"name": "PTWRITTA_WTS",
						"type": "String"
					},
					{
						"name": "PTWRITTA_AD",
						"type": "String"
					},
					{
						"name": "PTSCITA_EXP",
						"type": "String"
					},
					{
						"name": "PTSCITA_AD",
						"type": "String"
					},
					{
						"name": "PTRWM_EXP_B",
						"type": "String"
					},
					{
						"name": "PTRWM_EXP_G",
						"type": "String"
					},
					{
						"name": "PTRWM_EXP_L",
						"type": "String"
					},
					{
						"name": "PTRWM_EXP_M",
						"type": "String"
					},
					{
						"name": "PTRWM_EXP_H",
						"type": "String"
					},
					{
						"name": "PTRWM_EXP_FSM6CLA1A",
						"type": "String"
					},
					{
						"name": "PTRWM_EXP_NotFSM6CLA1A",
						"type": "String"
					},
					{
						"name": "DIFFN_RWM_EXP",
						"type": "String"
					},
					{
						"name": "PTRWM_EXP_EAL",
						"type": "String"
					},
					{
						"name": "PTRWM_EXP_MOBN",
						"type": "String"
					},
					{
						"name": "PTRWM_HIGH_B",
						"type": "String"
					},
					{
						"name": "PTRWM_HIGH_G",
						"type": "String"
					},
					{
						"name": "PTRWM_HIGH_L",
						"type": "String"
					},
					{
						"name": "PTRWM_HIGH_M",
						"type": "String"
					},
					{
						"name": "PTRWM_HIGH_H",
						"type": "String"
					},
					{
						"name": "PTRWM_HIGH_FSM6CLA1A",
						"type": "String"
					},
					{
						"name": "PTRWM_HIGH_NotFSM6CLA1A",
						"type": "String"
					},
					{
						"name": "DIFFN_RWM_HIGH",
						"type": "String"
					},
					{
						"name": "PTRWM_HIGH_EAL",
						"type": "String"
					},
					{
						"name": "PTRWM_HIGH_MOBN",
						"type": "String"
					},
					{
						"name": "READPROG_B",
						"type": "String"
					},
					{
						"name": "READPROG_B_LOWER",
						"type": "String"
					},
					{
						"name": "READPROG_B_UPPER",
						"type": "String"
					},
					{
						"name": "READPROG_G",
						"type": "String"
					},
					{
						"name": "READPROG_G_LOWER",
						"type": "String"
					},
					{
						"name": "READPROG_G_UPPER",
						"type": "String"
					},
					{
						"name": "READPROG_L",
						"type": "String"
					},
					{
						"name": "READPROG_L_LOWER",
						"type": "String"
					},
					{
						"name": "READPROG_L_UPPER",
						"type": "String"
					},
					{
						"name": "READPROG_M",
						"type": "String"
					},
					{
						"name": "READPROG_M_LOWER",
						"type": "String"
					},
					{
						"name": "READPROG_M_UPPER",
						"type": "String"
					},
					{
						"name": "READPROG_H",
						"type": "String"
					},
					{
						"name": "READPROG_H_LOWER",
						"type": "String"
					},
					{
						"name": "READPROG_H_UPPER",
						"type": "String"
					},
					{
						"name": "READPROG_FSM6CLA1A",
						"type": "String"
					},
					{
						"name": "READPROG_FSM6CLA1A_LOWER",
						"type": "String"
					},
					{
						"name": "READPROG_FSM6CLA1A_UPPER",
						"type": "String"
					},
					{
						"name": "READPROG_NotFSM6CLA1A",
						"type": "String"
					},
					{
						"name": "READPROG_NotFSM6CLA1A_LOWER",
						"type": "String"
					},
					{
						"name": "READPROG_NotFSM6CLA1A_UPPER",
						"type": "String"
					},
					{
						"name": "DIFFN_READPROG",
						"type": "String"
					},
					{
						"name": "READPROG_EAL",
						"type": "String"
					},
					{
						"name": "READPROG_EAL_LOWER",
						"type": "String"
					},
					{
						"name": "READPROG_EAL_UPPER",
						"type": "String"
					},
					{
						"name": "READPROG_MOBN",
						"type": "String"
					},
					{
						"name": "READPROG_MOBN_LOWER",
						"type": "String"
					},
					{
						"name": "READPROG_MOBN_UPPER",
						"type": "String"
					},
					{
						"name": "WRITPROG_B",
						"type": "String"
					},
					{
						"name": "WRITPROG_B_LOWER",
						"type": "String"
					},
					{
						"name": "WRITPROG_B_UPPER",
						"type": "String"
					},
					{
						"name": "WRITPROG_G",
						"type": "String"
					},
					{
						"name": "WRITPROG_G_LOWER",
						"type": "String"
					},
					{
						"name": "WRITPROG_G_UPPER",
						"type": "String"
					},
					{
						"name": "WRITPROG_L",
						"type": "String"
					},
					{
						"name": "WRITPROG_L_LOWER",
						"type": "String"
					},
					{
						"name": "WRITPROG_L_UPPER",
						"type": "String"
					},
					{
						"name": "WRITPROG_M",
						"type": "String"
					},
					{
						"name": "WRITPROG_M_LOWER",
						"type": "String"
					},
					{
						"name": "WRITPROG_M_UPPER",
						"type": "String"
					},
					{
						"name": "WRITPROG_H",
						"type": "String"
					},
					{
						"name": "WRITPROG_H_LOWER",
						"type": "String"
					},
					{
						"name": "WRITPROG_H_UPPER",
						"type": "String"
					},
					{
						"name": "WRITPROG_FSM6CLA1A",
						"type": "String"
					},
					{
						"name": "WRITPROG_FSM6CLA1A_LOWER",
						"type": "String"
					},
					{
						"name": "WRITPROG_FSM6CLA1A_UPPER",
						"type": "String"
					},
					{
						"name": "WRITPROG_NotFSM6CLA1A",
						"type": "String"
					},
					{
						"name": "WRITPROG_NotFSM6CLA1A_LOWER",
						"type": "String"
					},
					{
						"name": "WRITPROG_NotFSM6CLA1A_UPPER",
						"type": "String"
					},
					{
						"name": "DIFFN_WRITPROG",
						"type": "String"
					},
					{
						"name": "WRITPROG_EAL",
						"type": "String"
					},
					{
						"name": "WRITPROG_EAL_LOWER",
						"type": "String"
					},
					{
						"name": "WRITPROG_EAL_UPPER",
						"type": "String"
					},
					{
						"name": "WRITPROG_MOBN",
						"type": "String"
					},
					{
						"name": "WRITPROG_MOBN_LOWER",
						"type": "String"
					},
					{
						"name": "WRITPROG_MOBN_UPPER",
						"type": "String"
					},
					{
						"name": "MATPROG_B",
						"type": "String"
					},
					{
						"name": "MATPROG_B_LOWER",
						"type": "String"
					},
					{
						"name": "MATPROG_B_UPPER",
						"type": "String"
					},
					{
						"name": "MATPROG_G",
						"type": "String"
					},
					{
						"name": "MATPROG_G_LOWER",
						"type": "String"
					},
					{
						"name": "MATPROG_G_UPPER",
						"type": "String"
					},
					{
						"name": "MATPROG_L",
						"type": "String"
					},
					{
						"name": "MATPROG_L_LOWER",
						"type": "String"
					},
					{
						"name": "MATPROG_L_UPPER",
						"type": "String"
					},
					{
						"name": "MATPROG_M",
						"type": "String"
					},
					{
						"name": "MATPROG_M_LOWER",
						"type": "String"
					},
					{
						"name": "MATPROG_M_UPPER",
						"type": "String"
					},
					{
						"name": "MATPROG_H",
						"type": "String"
					},
					{
						"name": "MATPROG_H_LOWER",
						"type": "String"
					},
					{
						"name": "MATPROG_H_UPPER",
						"type": "String"
					},
					{
						"name": "MATPROG_FSM6CLA1A",
						"type": "String"
					},
					{
						"name": "MATPROG_FSM6CLA1A_LOWER",
						"type": "String"
					},
					{
						"name": "MATPROG_FSM6CLA1A_UPPER",
						"type": "String"
					},
					{
						"name": "MATPROG_NotFSM6CLA1A",
						"type": "String"
					},
					{
						"name": "MATPROG_NotFSM6CLA1A_LOWER",
						"type": "String"
					},
					{
						"name": "MATPROG_NotFSM6CLA1A_UPPER",
						"type": "String"
					},
					{
						"name": "DIFFN_MATPROG",
						"type": "String"
					},
					{
						"name": "MATPROG_EAL",
						"type": "String"
					},
					{
						"name": "MATPROG_EAL_LOWER",
						"type": "String"
					},
					{
						"name": "MATPROG_EAL_UPPER",
						"type": "String"
					},
					{
						"name": "MATPROG_MOBN",
						"type": "String"
					},
					{
						"name": "MATPROG_MOBN_LOWER",
						"type": "String"
					},
					{
						"name": "MATPROG_MOBN_UPPER",
						"type": "String"
					},
					{
						"name": "READ_AVERAGE_B",
						"type": "String"
					},
					{
						"name": "READ_AVERAGE_G",
						"type": "String"
					},
					{
						"name": "READ_AVERAGE_L",
						"type": "String"
					},
					{
						"name": "READ_AVERAGE_M",
						"type": "String"
					},
					{
						"name": "READ_AVERAGE_H",
						"type": "String"
					},
					{
						"name": "READ_AVERAGE_FSM6CLA1A",
						"type": "String"
					},
					{
						"name": "READ_AVERAGE_NotFSM6CLA1A",
						"type": "String"
					},
					{
						"name": "READ_AVERAGE_EAL",
						"type": "String"
					},
					{
						"name": "READ_AVERAGE_MOBN",
						"type": "String"
					},
					{
						"name": "MAT_AVERAGE_B",
						"type": "String"
					},
					{
						"name": "MAT_AVERAGE_G",
						"type": "String"
					},
					{
						"name": "MAT_AVERAGE_L",
						"type": "String"
					},
					{
						"name": "MAT_AVERAGE_M",
						"type": "String"
					},
					{
						"name": "MAT_AVERAGE_H",
						"type": "String"
					},
					{
						"name": "MAT_AVERAGE_FSM6CLA1A",
						"type": "String"
					},
					{
						"name": "MAT_AVERAGE_NotFSM6CLA1A",
						"type": "String"
					},
					{
						"name": "MAT_AVERAGE_EAL",
						"type": "String"
					},
					{
						"name": "MAT_AVERAGE_MOBN",
						"type": "String"
					},
					{
						"name": "GPS_AVERAGE_B",
						"type": "String"
					},
					{
						"name": "GPS_AVERAGE_G",
						"type": "String"
					},
					{
						"name": "GPS_AVERAGE_L",
						"type": "String"
					},
					{
						"name": "GPS_AVERAGE_M",
						"type": "String"
					},
					{
						"name": "GPS_AVERAGE_H",
						"type": "String"
					},
					{
						"name": "GPS_AVERAGE_FSM6CLA1A",
						"type": "String"
					},
					{
						"name": "GPS_AVERAGE_NotFSM6CLA1A",
						"type": "String"
					},
					{
						"name": "GPS_AVERAGE_EAL",
						"type": "String"
					},
					{
						"name": "GPS_AVERAGE_MOBN",
						"type": "String"
					},
					{
						"name": "PTREAD_EXP_L",
						"type": "String"
					},
					{
						"name": "PTREAD_EXP_M",
						"type": "String"
					},
					{
						"name": "PTREAD_EXP_H",
						"type": "String"
					},
					{
						"name": "PTREAD_EXP_FSM6CLA1A",
						"type": "String"
					},
					{
						"name": "PTREAD_EXP_NotFSM6CLA1A",
						"type": "String"
					},
					{
						"name": "PTGPS_EXP_L",
						"type": "String"
					},
					{
						"name": "PTGPS_EXP_M",
						"type": "String"
					},
					{
						"name": "PTGPS_EXP_H",
						"type": "String"
					},
					{
						"name": "PTGPS_EXP_FSM6CLA1A",
						"type": "String"
					},
					{
						"name": "PTGPS_EXP_NotFSM6CLA1A",
						"type": "String"
					},
					{
						"name": "PTMAT_EXP_L",
						"type": "String"
					},
					{
						"name": "PTMAT_EXP_M",
						"type": "String"
					},
					{
						"name": "PTMAT_EXP_H",
						"type": "String"
					},
					{
						"name": "PTMAT_EXP_FSM6CLA1A",
						"type": "String"
					},
					{
						"name": "PTMAT_EXP_NotFSM6CLA1A",
						"type": "String"
					},
					{
						"name": "PTWRITTA_EXP_L",
						"type": "String"
					},
					{
						"name": "PTWRITTA_EXP_M",
						"type": "String"
					},
					{
						"name": "PTWRITTA_EXP_H",
						"type": "String"
					},
					{
						"name": "PTWRITTA_EXP_FSM6CLA1A",
						"type": "String"
					},
					{
						"name": "PTWRITTA_EXP_NotFSM6CLA1A",
						"type": "String"
					},
					{
						"name": "PTREAD_HIGH_L",
						"type": "String"
					},
					{
						"name": "PTREAD_HIGH_M",
						"type": "String"
					},
					{
						"name": "PTREAD_HIGH_H",
						"type": "String"
					},
					{
						"name": "PTREAD_HIGH_FSM6CLA1A",
						"type": "String"
					},
					{
						"name": "PTREAD_HIGH_NotFSM6CLA1A",
						"type": "String"
					},
					{
						"name": "PTGPS_HIGH_L",
						"type": "String"
					},
					{
						"name": "PTGPS_HIGH_M",
						"type": "String"
					},
					{
						"name": "PTGPS_HIGH_H",
						"type": "String"
					},
					{
						"name": "PTGPS_HIGH_FSM6CLA1A",
						"type": "String"
					},
					{
						"name": "PTGPS_HIGH_NotFSM6CLA1A",
						"type": "String"
					},
					{
						"name": "PTMAT_HIGH_L",
						"type": "String"
					},
					{
						"name": "PTMAT_HIGH_M",
						"type": "String"
					},
					{
						"name": "PTMAT_HIGH_H",
						"type": "String"
					},
					{
						"name": "PTMAT_HIGH_FSM6CLA1A",
						"type": "String"
					},
					{
						"name": "PTMAT_HIGH_NotFSM6CLA1A",
						"type": "String"
					},
					{
						"name": "PTWRITTA_HIGH_L",
						"type": "String"
					},
					{
						"name": "PTWRITTA_HIGH_M",
						"type": "String"
					},
					{
						"name": "PTWRITTA_HIGH_H",
						"type": "String"
					},
					{
						"name": "PTWRITTA_HIGH_FSM6CLA1A",
						"type": "String"
					},
					{
						"name": "PTWRITTA_HIGH_NotFSM6CLA1A",
						"type": "String"
					},
					{
						"name": "TEALGRP1",
						"type": "String"
					},
					{
						"name": "PTEALGRP1",
						"type": "String"
					},
					{
						"name": "TEALGRP3",
						"type": "String"
					},
					{
						"name": "PTEALGRP3",
						"type": "String"
					},
					{
						"name": "TSENELE",
						"type": "String"
					},
					{
						"name": "PSENELE",
						"type": "String"
					},
					{
						"name": "TSENELK",
						"type": "String"
					},
					{
						"name": "PSENELK",
						"type": "String"
					},
					{
						"name": "TSENELEK",
						"type": "String"
					},
					{
						"name": "PSENELEK",
						"type": "String"
					},
					{
						"name": "TELIG_18",
						"type": "String"
					},
					{
						"name": "PTFSM6CLA1A_18",
						"type": "String"
					},
					{
						"name": "PTNOTFSM6CLA1A_18",
						"type": "String"
					},
					{
						"name": "PTRWM_EXP_18",
						"type": "String"
					},
					{
						"name": "PTRWM_HIGH_18",
						"type": "String"
					},
					{
						"name": "PTRWM_EXP_FSM6CLA1A_18",
						"type": "String"
					},
					{
						"name": "PTRWM_HIGH_FSM6CLA1A_18",
						"type": "String"
					},
					{
						"name": "PTRWM_EXP_NotFSM6CLA1A_18",
						"type": "String"
					},
					{
						"name": "PTRWM_HIGH_NotFSM6CLA1A_18",
						"type": "String"
					},
					{
						"name": "READPROG_18",
						"type": "String"
					},
					{
						"name": "READPROG_LOWER_18",
						"type": "String"
					},
					{
						"name": "READPROG_UPPER_18",
						"type": "String"
					},
					{
						"name": "WRITPROG_18",
						"type": "String"
					},
					{
						"name": "WRITPROG_LOWER_18",
						"type": "String"
					},
					{
						"name": "WRITPROG_UPPER_18",
						"type": "String"
					},
					{
						"name": "MATPROG_18",
						"type": "String"
					},
					{
						"name": "MATPROG_LOWER_18",
						"type": "String"
					},
					{
						"name": "MATPROG_UPPER_18",
						"type": "String"
					},
					{
						"name": "READ_AVERAGE_18",
						"type": "String"
					},
					{
						"name": "MAT_AVERAGE_18",
						"type": "String"
					},
					{
						"name": "TELIG_17",
						"type": "String"
					},
					{
						"name": "PTFSM6CLA1A_17",
						"type": "String"
					},
					{
						"name": "PTNOTFSM6CLA1A_17",
						"type": "String"
					},
					{
						"name": "PTRWM_EXP_17",
						"type": "String"
					},
					{
						"name": "PTRWM_HIGH_17",
						"type": "String"
					},
					{
						"name": "PTRWM_EXP_FSM6CLA1A_17",
						"type": "String"
					},
					{
						"name": "PTRWM_HIGH_FSM6CLA1A_17",
						"type": "String"
					},
					{
						"name": "PTRWM_EXP_NotFSM6CLA1A_17",
						"type": "String"
					},
					{
						"name": "PTRWM_HIGH_NotFSM6CLA1A_17",
						"type": "String"
					},
					{
						"name": "READPROG_17",
						"type": "String"
					},
					{
						"name": "READPROG_LOWER_17",
						"type": "String"
					},
					{
						"name": "READPROG_UPPER_17",
						"type": "String"
					},
					{
						"name": "WRITPROG_17",
						"type": "String"
					},
					{
						"name": "WRITPROG_LOWER_17",
						"type": "String"
					},
					{
						"name": "WRITPROG_UPPER_17",
						"type": "String"
					},
					{
						"name": "MATPROG_17",
						"type": "String"
					},
					{
						"name": "MATPROG_LOWER_17",
						"type": "String"
					},
					{
						"name": "MATPROG_UPPER_17",
						"type": "String"
					},
					{
						"name": "READ_AVERAGE_17",
						"type": "String"
					},
					{
						"name": "MAT_AVERAGE_17",
						"type": "String"
					},
					{
						"name": "TELIG_3YR",
						"type": "String"
					},
					{
						"name": "PTRWM_EXP_3YR",
						"type": "String"
					},
					{
						"name": "PTRWM_HIGH_3YR",
						"type": "String"
					},
					{
						"name": "READ_AVERAGE_3YR",
						"type": "String"
					},
					{
						"name": "MAT_AVERAGE_3YR",
						"type": "String"
					},
					{
						"name": "READPROG_UNADJUSTED",
						"type": "String"
					},
					{
						"name": "WRITPROG_UNADJUSTED",
						"type": "String"
					},
					{
						"name": "MATPROG_UNADJUSTED",
						"type": "String"
					},
					{
						"name": "READPROG_DESCR_17",
						"type": "String"
					},
					{
						"name": "WRITPROG_DESCR_17",
						"type": "String"
					},
					{
						"name": "MATPROG_DESCR_17",
						"type": "String"
					},
					{
						"name": "READPROG_DESCR_18",
						"type": "String"
					},
					{
						"name": "WRITPROG_DESCR_18",
						"type": "String"
					},
					{
						"name": "MATPROG_DESCR_18",
						"type": "String"
					},
					{
						"name": "READPROG_DESCR",
						"type": "String"
					},
					{
						"name": "WRITPROG_DESCR",
						"type": "String"
					},
					{
						"name": "MATPROG_DESCR",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Parquet1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "MappingDemooutput",
						"fileSystem": "public"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/azureSynapseAnalyticsSchema')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"SynapseWorkspaceName": {
							"value": "@dataset().SynapseWorkspaceName",
							"type": "Expression"
						},
						"SQLDedicatedPoolName": {
							"value": "@dataset().SQLDedicatedPoolName",
							"type": "Expression"
						},
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"SQLLoginUsername": {
							"value": "@dataset().SQLLoginUsername",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SynapseWorkspaceName": {
						"type": "string"
					},
					"SQLDedicatedPoolName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					},
					"SQLLoginUsername": {
						"type": "string"
					}
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/azureSynapseAnalyticsTable')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"SynapseWorkspaceName": {
							"value": "@dataset().SynapseWorkspaceName",
							"type": "Expression"
						},
						"SQLDedicatedPoolName": {
							"value": "@dataset().SQLDedicatedPoolName",
							"type": "Expression"
						},
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"SQLLoginUsername": {
							"value": "@dataset().SQLLoginUsername",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"SynapseWorkspaceName": {
						"type": "string"
					},
					"SQLDedicatedPoolName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					},
					"SQLLoginUsername": {
						"type": "string"
					}
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": "AggregateTaxiData"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/faresDataSink')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresDataLakeStorageLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"datalakeAccountName": {
							"value": "@dataset().datalakeAccountName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"keyVaultName": {
						"type": "string",
						"defaultValue": "kvmsft"
					},
					"datalakeAccountName": {
						"type": "string",
						"defaultValue": "adlsmsft"
					}
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "fares-data.csv",
						"fileSystem": "public"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "medallion",
						"type": "String"
					},
					{
						"name": "hack_license",
						"type": "String"
					},
					{
						"name": "vendor_id",
						"type": "String"
					},
					{
						"name": "pickup_datetime",
						"type": "String"
					},
					{
						"name": "payment_type",
						"type": "String"
					},
					{
						"name": "fare_amount",
						"type": "String"
					},
					{
						"name": "surcharge",
						"type": "String"
					},
					{
						"name": "mta_tax",
						"type": "String"
					},
					{
						"name": "tip_amount",
						"type": "String"
					},
					{
						"name": "tolls_amount",
						"type": "String"
					},
					{
						"name": "total_amount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresDataLakeStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/faresDataSource')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServerTripFareDataLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/HttpServerTripFareDataLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tripDataSink')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TripFaresDataLakeStorageLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"keyVaultName": {
							"value": "@dataset().keyVaultName",
							"type": "Expression"
						},
						"datalakeAccountName": {
							"value": "@dataset().datalakeAccountName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"datalakeAccountName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "trip-data.csv",
						"fileSystem": "public"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "medallion",
						"type": "String"
					},
					{
						"name": "hack_license",
						"type": "String"
					},
					{
						"name": "vendor_id",
						"type": "String"
					},
					{
						"name": "rate_code",
						"type": "String"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "String"
					},
					{
						"name": "pickup_datetime",
						"type": "String"
					},
					{
						"name": "dropoff_datetime",
						"type": "String"
					},
					{
						"name": "passenger_count",
						"type": "String"
					},
					{
						"name": "trip_time_in_secs",
						"type": "String"
					},
					{
						"name": "trip_distance",
						"type": "String"
					},
					{
						"name": "pickup_longitude",
						"type": "String"
					},
					{
						"name": "pickup_latitude",
						"type": "String"
					},
					{
						"name": "dropoff_longitude",
						"type": "String"
					},
					{
						"name": "dropoff_latitude",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TripFaresDataLakeStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tripsDataSource')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServerTripDataLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TripFareDatasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/HttpServerTripDataLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage2_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HttpServerTripDataLinkedService')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServerTripDataLinkedService_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HttpServerTripFareDataLinkedService')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServerTripFareDataLinkedService_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PowerBIWorkspaceTripsFares')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "289b722a-0cb3-4f8a-bd7e-242e5ab8d58d",
					"tenantID": "72f988bf-86f1-41af-91ab-2d7cd011db47"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TripFaresDataLakeStorageLinkedService')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"keyVaultName": {
						"type": "string"
					},
					"datalakeAccountName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('TripFaresDataLakeStorageLinkedService_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "keyVaultLinkedservice",
							"type": "LinkedServiceReference",
							"parameters": {
								"keyVaultName": {
									"value": "@linkedService().keyVaultName",
									"type": "Expression"
								}
							}
						},
						"secretName": "adlsAccessKey"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/keyVaultLinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TripFaresSynapseAnalyticsLinkedService')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"SynapseWorkspaceName": {
						"type": "string"
					},
					"SQLDedicatedPoolName": {
						"type": "string"
					},
					"keyVaultName": {
						"type": "string"
					},
					"SQLLoginUsername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('TripFaresSynapseAnalyticsLinkedService_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "keyVaultLinkedservice",
							"type": "LinkedServiceReference",
							"parameters": {
								"keyVaultName": {
									"value": "@linkedService().keyVaultName",
									"type": "Expression"
								}
							}
						},
						"secretName": "synapseSqlLoginPassword"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/keyVaultLinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/keyVaultLinkedservice')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"keyVaultName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('keyVaultLinkedservice_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"cleanup": true
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Excel1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1",
							"description": "Aggregating data by 'pcode_short' producing columns 'total_count'"
						}
					],
					"scriptLines": [
						"source(output(",
						"          RECTYPE as string,",
						"          ALPHAIND as string,",
						"          LEA as string,",
						"          ESTAB as string,",
						"          URN as string,",
						"          SCHNAME as string,",
						"          ADDRESS1 as string,",
						"          ADDRESS2 as string,",
						"          ADDRESS3 as string,",
						"          TOWN as string,",
						"          PCODE as string,",
						"          TELNUM as string,",
						"          PCON_CODE as string,",
						"          PCON_NAME as string,",
						"          URN_AC as string,",
						"          SCHNAME_AC as string,",
						"          OPEN_AC as string,",
						"          NFTYPE as string,",
						"          ICLOSE as string,",
						"          RELDENOM as string,",
						"          AGERANGE as string,",
						"          CONFEXAM as string,",
						"          TAB15 as string,",
						"          TAB1618 as string,",
						"          TOTPUPS as string,",
						"          TPUPYEAR as string,",
						"          TELIG as string,",
						"          BELIG as string,",
						"          GELIG as string,",
						"          PBELIG as string,",
						"          PGELIG as string,",
						"          TKS1AVERAGE as string,",
						"          TKS1GROUP_L as string,",
						"          PTKS1GROUP_L as string,",
						"          TKS1GROUP_M as string,",
						"          PTKS1GROUP_M as string,",
						"          TKS1GROUP_H as string,",
						"          PTKS1GROUP_H as string,",
						"          TKS1GROUP_NA as string,",
						"          PTKS1GROUP_NA as string,",
						"          TFSM6CLA1A as string,",
						"          PTFSM6CLA1A as string,",
						"          TNotFSM6CLA1A as string,",
						"          PTNotFSM6CLA1A as string,",
						"          TEALGRP2 as string,",
						"          PTEALGRP2 as string,",
						"          TMOBN as string,",
						"          PTMOBN as string,",
						"          PTRWM_EXP as string,",
						"          PTRWM_HIGH as string,",
						"          READPROG as string,",
						"          READPROG_LOWER as string,",
						"          READPROG_UPPER as string,",
						"          READCOV as string,",
						"          WRITPROG as string,",
						"          WRITPROG_LOWER as string,",
						"          WRITPROG_UPPER as string,",
						"          WRITCOV as string,",
						"          MATPROG as string,",
						"          MATPROG_LOWER as string,",
						"          MATPROG_UPPER as string,",
						"          MATCOV as string,",
						"          PTREAD_EXP as string,",
						"          PTREAD_HIGH as string,",
						"          PTREAD_AT as string,",
						"          READ_AVERAGE as string,",
						"          PTGPS_EXP as string,",
						"          PTGPS_HIGH as string,",
						"          PTGPS_AT as string,",
						"          GPS_AVERAGE as string,",
						"          PTMAT_EXP as string,",
						"          PTMAT_HIGH as string,",
						"          PTMAT_AT as string,",
						"          MAT_AVERAGE as string,",
						"          PTWRITTA_EXP as string,",
						"          PTWRITTA_HIGH as string,",
						"          PTWRITTA_WTS as string,",
						"          PTWRITTA_AD as string,",
						"          PTSCITA_EXP as string,",
						"          PTSCITA_AD as string,",
						"          PTRWM_EXP_B as string,",
						"          PTRWM_EXP_G as string,",
						"          PTRWM_EXP_L as string,",
						"          PTRWM_EXP_M as string,",
						"          PTRWM_EXP_H as string,",
						"          PTRWM_EXP_FSM6CLA1A as string,",
						"          PTRWM_EXP_NotFSM6CLA1A as string,",
						"          DIFFN_RWM_EXP as string,",
						"          PTRWM_EXP_EAL as string,",
						"          PTRWM_EXP_MOBN as string,",
						"          PTRWM_HIGH_B as string,",
						"          PTRWM_HIGH_G as string,",
						"          PTRWM_HIGH_L as string,",
						"          PTRWM_HIGH_M as string,",
						"          PTRWM_HIGH_H as string,",
						"          PTRWM_HIGH_FSM6CLA1A as string,",
						"          PTRWM_HIGH_NotFSM6CLA1A as string,",
						"          DIFFN_RWM_HIGH as string,",
						"          PTRWM_HIGH_EAL as string,",
						"          PTRWM_HIGH_MOBN as string,",
						"          READPROG_B as string,",
						"          READPROG_B_LOWER as string,",
						"          READPROG_B_UPPER as string,",
						"          READPROG_G as string,",
						"          READPROG_G_LOWER as string,",
						"          READPROG_G_UPPER as string,",
						"          READPROG_L as string,",
						"          READPROG_L_LOWER as string,",
						"          READPROG_L_UPPER as string,",
						"          READPROG_M as string,",
						"          READPROG_M_LOWER as string,",
						"          READPROG_M_UPPER as string,",
						"          READPROG_H as string,",
						"          READPROG_H_LOWER as string,",
						"          READPROG_H_UPPER as string,",
						"          READPROG_FSM6CLA1A as string,",
						"          READPROG_FSM6CLA1A_LOWER as string,",
						"          READPROG_FSM6CLA1A_UPPER as string,",
						"          READPROG_NotFSM6CLA1A as string,",
						"          READPROG_NotFSM6CLA1A_LOWER as string,",
						"          READPROG_NotFSM6CLA1A_UPPER as string,",
						"          DIFFN_READPROG as string,",
						"          READPROG_EAL as string,",
						"          READPROG_EAL_LOWER as string,",
						"          READPROG_EAL_UPPER as string,",
						"          READPROG_MOBN as string,",
						"          READPROG_MOBN_LOWER as string,",
						"          READPROG_MOBN_UPPER as string,",
						"          WRITPROG_B as string,",
						"          WRITPROG_B_LOWER as string,",
						"          WRITPROG_B_UPPER as string,",
						"          WRITPROG_G as string,",
						"          WRITPROG_G_LOWER as string,",
						"          WRITPROG_G_UPPER as string,",
						"          WRITPROG_L as string,",
						"          WRITPROG_L_LOWER as string,",
						"          WRITPROG_L_UPPER as string,",
						"          WRITPROG_M as string,",
						"          WRITPROG_M_LOWER as string,",
						"          WRITPROG_M_UPPER as string,",
						"          WRITPROG_H as string,",
						"          WRITPROG_H_LOWER as string,",
						"          WRITPROG_H_UPPER as string,",
						"          WRITPROG_FSM6CLA1A as string,",
						"          WRITPROG_FSM6CLA1A_LOWER as string,",
						"          WRITPROG_FSM6CLA1A_UPPER as string,",
						"          WRITPROG_NotFSM6CLA1A as string,",
						"          WRITPROG_NotFSM6CLA1A_LOWER as string,",
						"          WRITPROG_NotFSM6CLA1A_UPPER as string,",
						"          DIFFN_WRITPROG as string,",
						"          WRITPROG_EAL as string,",
						"          WRITPROG_EAL_LOWER as string,",
						"          WRITPROG_EAL_UPPER as string,",
						"          WRITPROG_MOBN as string,",
						"          WRITPROG_MOBN_LOWER as string,",
						"          WRITPROG_MOBN_UPPER as string,",
						"          MATPROG_B as string,",
						"          MATPROG_B_LOWER as string,",
						"          MATPROG_B_UPPER as string,",
						"          MATPROG_G as string,",
						"          MATPROG_G_LOWER as string,",
						"          MATPROG_G_UPPER as string,",
						"          MATPROG_L as string,",
						"          MATPROG_L_LOWER as string,",
						"          MATPROG_L_UPPER as string,",
						"          MATPROG_M as string,",
						"          MATPROG_M_LOWER as string,",
						"          MATPROG_M_UPPER as string,",
						"          MATPROG_H as string,",
						"          MATPROG_H_LOWER as string,",
						"          MATPROG_H_UPPER as string,",
						"          MATPROG_FSM6CLA1A as string,",
						"          MATPROG_FSM6CLA1A_LOWER as string,",
						"          MATPROG_FSM6CLA1A_UPPER as string,",
						"          MATPROG_NotFSM6CLA1A as string,",
						"          MATPROG_NotFSM6CLA1A_LOWER as string,",
						"          MATPROG_NotFSM6CLA1A_UPPER as string,",
						"          DIFFN_MATPROG as string,",
						"          MATPROG_EAL as string,",
						"          MATPROG_EAL_LOWER as string,",
						"          MATPROG_EAL_UPPER as string,",
						"          MATPROG_MOBN as string,",
						"          MATPROG_MOBN_LOWER as string,",
						"          MATPROG_MOBN_UPPER as string,",
						"          READ_AVERAGE_B as string,",
						"          READ_AVERAGE_G as string,",
						"          READ_AVERAGE_L as string,",
						"          READ_AVERAGE_M as string,",
						"          READ_AVERAGE_H as string,",
						"          READ_AVERAGE_FSM6CLA1A as string,",
						"          READ_AVERAGE_NotFSM6CLA1A as string,",
						"          READ_AVERAGE_EAL as string,",
						"          READ_AVERAGE_MOBN as string,",
						"          MAT_AVERAGE_B as string,",
						"          MAT_AVERAGE_G as string,",
						"          MAT_AVERAGE_L as string,",
						"          MAT_AVERAGE_M as string,",
						"          MAT_AVERAGE_H as string,",
						"          MAT_AVERAGE_FSM6CLA1A as string,",
						"          MAT_AVERAGE_NotFSM6CLA1A as string,",
						"          MAT_AVERAGE_EAL as string,",
						"          MAT_AVERAGE_MOBN as string,",
						"          GPS_AVERAGE_B as string,",
						"          GPS_AVERAGE_G as string,",
						"          GPS_AVERAGE_L as string,",
						"          GPS_AVERAGE_M as string,",
						"          GPS_AVERAGE_H as string,",
						"          GPS_AVERAGE_FSM6CLA1A as string,",
						"          GPS_AVERAGE_NotFSM6CLA1A as string,",
						"          GPS_AVERAGE_EAL as string,",
						"          GPS_AVERAGE_MOBN as string,",
						"          PTREAD_EXP_L as string,",
						"          PTREAD_EXP_M as string,",
						"          PTREAD_EXP_H as string,",
						"          PTREAD_EXP_FSM6CLA1A as string,",
						"          PTREAD_EXP_NotFSM6CLA1A as string,",
						"          PTGPS_EXP_L as string,",
						"          PTGPS_EXP_M as string,",
						"          PTGPS_EXP_H as string,",
						"          PTGPS_EXP_FSM6CLA1A as string,",
						"          PTGPS_EXP_NotFSM6CLA1A as string,",
						"          PTMAT_EXP_L as string,",
						"          PTMAT_EXP_M as string,",
						"          PTMAT_EXP_H as string,",
						"          PTMAT_EXP_FSM6CLA1A as string,",
						"          PTMAT_EXP_NotFSM6CLA1A as string,",
						"          PTWRITTA_EXP_L as string,",
						"          PTWRITTA_EXP_M as string,",
						"          PTWRITTA_EXP_H as string,",
						"          PTWRITTA_EXP_FSM6CLA1A as string,",
						"          PTWRITTA_EXP_NotFSM6CLA1A as string,",
						"          PTREAD_HIGH_L as string,",
						"          PTREAD_HIGH_M as string,",
						"          PTREAD_HIGH_H as string,",
						"          PTREAD_HIGH_FSM6CLA1A as string,",
						"          PTREAD_HIGH_NotFSM6CLA1A as string,",
						"          PTGPS_HIGH_L as string,",
						"          PTGPS_HIGH_M as string,",
						"          PTGPS_HIGH_H as string,",
						"          PTGPS_HIGH_FSM6CLA1A as string,",
						"          PTGPS_HIGH_NotFSM6CLA1A as string,",
						"          PTMAT_HIGH_L as string,",
						"          PTMAT_HIGH_M as string,",
						"          PTMAT_HIGH_H as string,",
						"          PTMAT_HIGH_FSM6CLA1A as string,",
						"          PTMAT_HIGH_NotFSM6CLA1A as string,",
						"          PTWRITTA_HIGH_L as string,",
						"          PTWRITTA_HIGH_M as string,",
						"          PTWRITTA_HIGH_H as string,",
						"          PTWRITTA_HIGH_FSM6CLA1A as string,",
						"          PTWRITTA_HIGH_NotFSM6CLA1A as string,",
						"          TEALGRP1 as string,",
						"          PTEALGRP1 as string,",
						"          TEALGRP3 as string,",
						"          PTEALGRP3 as string,",
						"          TSENELE as string,",
						"          PSENELE as string,",
						"          TSENELK as string,",
						"          PSENELK as string,",
						"          TSENELEK as string,",
						"          PSENELEK as string,",
						"          TELIG_18 as string,",
						"          PTFSM6CLA1A_18 as string,",
						"          PTNOTFSM6CLA1A_18 as string,",
						"          PTRWM_EXP_18 as string,",
						"          PTRWM_HIGH_18 as string,",
						"          PTRWM_EXP_FSM6CLA1A_18 as string,",
						"          PTRWM_HIGH_FSM6CLA1A_18 as string,",
						"          PTRWM_EXP_NotFSM6CLA1A_18 as string,",
						"          PTRWM_HIGH_NotFSM6CLA1A_18 as string,",
						"          READPROG_18 as string,",
						"          READPROG_LOWER_18 as string,",
						"          READPROG_UPPER_18 as string,",
						"          WRITPROG_18 as string,",
						"          WRITPROG_LOWER_18 as string,",
						"          WRITPROG_UPPER_18 as string,",
						"          MATPROG_18 as string,",
						"          MATPROG_LOWER_18 as string,",
						"          MATPROG_UPPER_18 as string,",
						"          READ_AVERAGE_18 as string,",
						"          MAT_AVERAGE_18 as string,",
						"          TELIG_17 as string,",
						"          PTFSM6CLA1A_17 as string,",
						"          PTNOTFSM6CLA1A_17 as string,",
						"          PTRWM_EXP_17 as string,",
						"          PTRWM_HIGH_17 as string,",
						"          PTRWM_EXP_FSM6CLA1A_17 as string,",
						"          PTRWM_HIGH_FSM6CLA1A_17 as string,",
						"          PTRWM_EXP_NotFSM6CLA1A_17 as string,",
						"          PTRWM_HIGH_NotFSM6CLA1A_17 as string,",
						"          READPROG_17 as string,",
						"          READPROG_LOWER_17 as string,",
						"          READPROG_UPPER_17 as string,",
						"          WRITPROG_17 as string,",
						"          WRITPROG_LOWER_17 as string,",
						"          WRITPROG_UPPER_17 as string,",
						"          MATPROG_17 as string,",
						"          MATPROG_LOWER_17 as string,",
						"          MATPROG_UPPER_17 as string,",
						"          READ_AVERAGE_17 as string,",
						"          MAT_AVERAGE_17 as string,",
						"          TELIG_3YR as string,",
						"          PTRWM_EXP_3YR as string,",
						"          PTRWM_HIGH_3YR as string,",
						"          READ_AVERAGE_3YR as string,",
						"          MAT_AVERAGE_3YR as string,",
						"          READPROG_UNADJUSTED as string,",
						"          WRITPROG_UNADJUSTED as string,",
						"          MATPROG_UNADJUSTED as string,",
						"          READPROG_DESCR_17 as string,",
						"          WRITPROG_DESCR_17 as string,",
						"          MATPROG_DESCR_17 as string,",
						"          READPROG_DESCR_18 as string,",
						"          WRITPROG_DESCR_18 as string,",
						"          MATPROG_DESCR_18 as string,",
						"          READPROG_DESCR as string,",
						"          WRITPROG_DESCR as string,",
						"          MATPROG_DESCR as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(pcode_short = substring(PCODE,0,4)) ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(pcode_short),",
						"     total_count = count()) ~> aggregate1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Excel1')]",
				"[concat(variables('workspaceId'), '/datasets/Parquet1')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tripFaresDataTransformations')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TripFaresDataFlow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tripDataSink",
								"type": "DatasetReference"
							},
							"name": "TripDataCSV"
						},
						{
							"dataset": {
								"referenceName": "faresDataSink",
								"type": "DatasetReference"
							},
							"name": "FaresDataCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "azureSynapseAnalyticsTable",
								"type": "DatasetReference"
							},
							"name": "SynapseAnalyticsSink"
						}
					],
					"transformations": [
						{
							"name": "AggregateByPaymentType"
						},
						{
							"name": "InnerJoinWithTripFares"
						}
					],
					"script": "source(output(\n\t\tmedallion as string,\n\t\thack_license as string,\n\t\tvendor_id as string,\n\t\trate_code as string,\n\t\tstore_and_fwd_flag as string,\n\t\tpickup_datetime as string,\n\t\tdropoff_datetime as string,\n\t\tpassenger_count as string,\n\t\ttrip_time_in_secs as string,\n\t\ttrip_distance as string,\n\t\tpickup_longitude as string,\n\t\tpickup_latitude as string,\n\t\tdropoff_longitude as string,\n\t\tdropoff_latitude as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false) ~> TripDataCSV\nsource(output(\n\t\tmedallion as string,\n\t\thack_license as string,\n\t\tvendor_id as string,\n\t\tpickup_datetime as string,\n\t\tpayment_type as string,\n\t\tfare_amount as string,\n\t\tsurcharge as string,\n\t\tmta_tax as string,\n\t\ttip_amount as string,\n\t\ttolls_amount as string,\n\t\ttotal_amount as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false) ~> FaresDataCSV\nInnerJoinWithTripFares aggregate(groupBy(payment_type),\n\taverage_fare = avg(toInteger(total_amount)),\n\t\ttotal_trip_distance = sum(toInteger(trip_distance))) ~> AggregateByPaymentType\nTripDataCSV, FaresDataCSV join(TripDataCSV@medallion == FaresDataCSV@medallion\n\t&& TripDataCSV@hack_license == FaresDataCSV@hack_license\n\t&& TripDataCSV@vendor_id == FaresDataCSV@vendor_id\n\t&& TripDataCSV@pickup_datetime == FaresDataCSV@pickup_datetime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> InnerJoinWithTripFares\nAggregateByPaymentType sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tstaged: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SynapseAnalyticsSink"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/tripDataSink')]",
				"[concat(variables('workspaceId'), '/datasets/faresDataSink')]",
				"[concat(variables('workspaceId'), '/datasets/azureSynapseAnalyticsTable')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'public_cmpnbnmosngz7ou2poc_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [public_cmpnbnmosngz7ou2poc_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://public@cmpnbnmosngz7ou2poc.dfs.core.windows.net' \n\t)\nGO\n\ndrop VIEW Taxitable1\nCREATE  VIEW Taxitable1 AS Select \n*\n\tFROM\n    OPENROWSET\n\t(\n        BULK 'Folder1',\n        DATA_SOURCE = 'public_cmpnbnmosngz7ou2poc_dfs_core_windows_net',\n        FORMAT= 'DELTA'\n    ) AS nyc\n\n\n\nSELECT TOP 100 * FROM dbo.Taxitable1\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "TaxiTable",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [vendorID]\n,[tpepPickupDateTime]\n,[tpepDropoffDateTime]\n,[passengerCount]\n,[tripDistance]\n,[puLocationId]\n,[tipAmount]\n,[tollsAmount]\n,[totalAmount]\n,[puYear]\n,[puMonth]\n,[storeAndFwdFlag]\n,[paymentType]\n,[fareAmount]\n,[extra]\n,[mtaTax]\n,[improvementSurcharge]\n,[doLocationId]\n,[startLon]\n,[startLat]\n,[endLon]\n,[endLat]\n,[rateCodeId]\n FROM [dbo].[Taxitable1]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "TaxiTable",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Data Exploration and ML Modeling - NYC taxi predict using Spark MLlib')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "ws1sparkpool1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/4eeedd72-d937-4243-86d1-c3982a84d924/resourceGroups/nashahzsfin/providers/Microsoft.Synapse/workspaces/mfstspdjvzuh3xeu2pocws1/bigDataPools/ws1sparkpool1",
						"name": "ws1sparkpool1",
						"type": "Spark",
						"endpoint": "https://mfstspdjvzuh3xeu2pocws1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ws1sparkpool1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 5,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Predict NYC Taxi Tips using Spark ML and Azure Open Datasets\n",
							"\n",
							"The notebook ingests, visualizes, prepares and then trains a model based on an Open Dataset that tracks NYC Yellow Taxi trips and various attributes around them.\n",
							"The goal is to predict for a given trip whether there will be a tip or not.\n",
							"\n",
							" https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/apache-spark-machine-learning-mllib-notebook\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"import matplotlib.pyplot as plt\n",
							"\n",
							"from pyspark.sql.functions import unix_timestamp\n",
							"\n",
							"from pyspark.sql import SparkSession\n",
							"from pyspark.sql.types import *\n",
							"from pyspark.sql.functions import *\n",
							"\n",
							"from pyspark.ml import Pipeline\n",
							"from pyspark.ml import PipelineModel\n",
							"from pyspark.ml.feature import RFormula\n",
							"from pyspark.ml.feature import OneHotEncoder, StringIndexer, VectorIndexer\n",
							"from pyspark.ml.classification import LogisticRegression\n",
							"from pyspark.mllib.evaluation import BinaryClassificationMetrics\n",
							"from pyspark.ml.evaluation import BinaryClassificationEvaluator"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Ingest Data¶ \n",
							"\n",
							"Get a sample data of nyc yellow taxi to make it faster/easier to evaluate different approaches to prep for the modelling phase later in the notebook."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Import NYC yellow cab data from Azure Open Datasets\n",
							"from azureml.opendatasets import NycTlcYellow\n",
							"\n",
							"from datetime import datetime\n",
							"from dateutil import parser\n",
							"\n",
							"end_date = parser.parse('2018-05-08 00:00:00')\n",
							"start_date = parser.parse('2018-05-01 00:00:00')\n",
							"\n",
							"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\n",
							"nyc_tlc_df = nyc_tlc.to_spark_dataframe()"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"source": [
							"#To make development easier, faster and less expensive downsample for now\n",
							"sampled_taxi_df = nyc_tlc_df.sample(True, 0.001, seed=1234)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Exploratory Data Analysis\n",
							"\n",
							"Look at the data and evaluate its suitability for use in a model, do this via some basic charts focussed on tip values and relationships."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"#The charting package needs a Pandas dataframe or numpy array do the conversion\n",
							"sampled_taxi_pd_df = sampled_taxi_df.toPandas()\n",
							"\n",
							"# Look at tips by amount count histogram\n",
							"ax1 = sampled_taxi_pd_df['tipAmount'].plot(kind='hist', bins=25, facecolor='lightblue')\n",
							"ax1.set_title('Tip amount distribution')\n",
							"ax1.set_xlabel('Tip Amount ($)')\n",
							"ax1.set_ylabel('Counts')\n",
							"plt.suptitle('')\n",
							"plt.show()\n",
							"\n",
							"# How many passengers tip'd by various amounts\n",
							"ax2 = sampled_taxi_pd_df.boxplot(column=['tipAmount'], by=['passengerCount'])\n",
							"ax2.set_title('Tip amount by Passenger count')\n",
							"ax2.set_xlabel('Passenger count') \n",
							"ax2.set_ylabel('Tip Amount ($)')\n",
							"plt.suptitle('')\n",
							"plt.show()\n",
							"\n",
							"# Look at the relationship between fare and tip amounts\n",
							"ax = sampled_taxi_pd_df.plot(kind='scatter', x= 'fareAmount', y = 'tipAmount', c='blue', alpha = 0.10, s=2.5*(sampled_taxi_pd_df['passengerCount']))\n",
							"ax.set_title('Tip amount by Fare amount')\n",
							"ax.set_xlabel('Fare Amount ($)')\n",
							"ax.set_ylabel('Tip Amount ($)')\n",
							"plt.axis([-2, 80, -2, 20])\n",
							"plt.suptitle('')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Data Prep and Featurization\n",
							"\n",
							"It's clear from the visualizations above that there are a bunch of outliers in the data. These will need to be filtered out in addition there are extra variables that are not going to be useful in the model we build at the end.\n",
							"\n",
							"Finally there is a need to create some new (derived) variables that will work better with the model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"taxi_df = sampled_taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'rateCodeId', 'passengerCount'\\\n",
							"                                , 'tripDistance', 'tpepPickupDateTime', 'tpepDropoffDateTime'\\\n",
							"                                , date_format('tpepPickupDateTime', 'hh').alias('pickupHour')\\\n",
							"                                , date_format('tpepPickupDateTime', 'EEEE').alias('weekdayString')\\\n",
							"                                , (unix_timestamp(col('tpepDropoffDateTime')) - unix_timestamp(col('tpepPickupDateTime'))).alias('tripTimeSecs')\\\n",
							"                                , (when(col('tipAmount') > 0, 1).otherwise(0)).alias('tipped')\n",
							"                                )\\\n",
							"                        .filter((sampled_taxi_df.passengerCount > 0) & (sampled_taxi_df.passengerCount < 8)\\\n",
							"                                & (sampled_taxi_df.tipAmount >= 0) & (sampled_taxi_df.tipAmount <= 25)\\\n",
							"                                & (sampled_taxi_df.fareAmount >= 1) & (sampled_taxi_df.fareAmount <= 250)\\\n",
							"                                & (sampled_taxi_df.tipAmount < sampled_taxi_df.fareAmount)\\\n",
							"                                & (sampled_taxi_df.tripDistance > 0) & (sampled_taxi_df.tripDistance <= 100)\\\n",
							"                                & (sampled_taxi_df.rateCodeId <= 5)\n",
							"                                & (sampled_taxi_df.paymentType.isin({\"1\", \"2\"}))\n",
							"                                )"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Data Prep and Featurization Part 2\n",
							"\n",
							"Having created new variables its now possible to drop the columns they were derived from so that the dataframe that goes into the model is the smallest in terms of number of variables, that is required.\n",
							"\n",
							"Also create some more features based on new columns from the first round.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"taxi_featurised_df = taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'passengerCount'\\\n",
							"                                                , 'tripDistance', 'weekdayString', 'pickupHour','tripTimeSecs','tipped'\\\n",
							"                                                , when((taxi_df.pickupHour <= 6) | (taxi_df.pickupHour >= 20),\"Night\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 7) & (taxi_df.pickupHour <= 10), \"AMRush\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 11) & (taxi_df.pickupHour <= 15), \"Afternoon\")\\\n",
							"                                                .when((taxi_df.pickupHour >= 16) & (taxi_df.pickupHour <= 19), \"PMRush\")\\\n",
							"                                                .otherwise(0).alias('trafficTimeBins')\n",
							"                                              )\\\n",
							"                                       .filter((taxi_df.tripTimeSecs >= 30) & (taxi_df.tripTimeSecs <= 7200))"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Encoding\n",
							"\n",
							"Different ML algorithms support different types of input, for this example Logistic Regression is being used for Binary Classification. This means that any Categorical (string) variables must be converted to numbers.\n",
							"\n",
							"The process is not as simple as a \"map\" style function as the relationship between the numbers can introduce a bias in the resulting model, the approach is to index the variable and then encode using a std approach called One Hot Encoding.\n",
							"\n",
							"This approach requires the encoder to \"learn\"/fit a model over the data in the Spark instance and then transform based on what was learnt.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# The sample uses an algorithm that only works with numeric features convert them so they can be consumed\n",
							"sI1 = StringIndexer(inputCol=\"trafficTimeBins\", outputCol=\"trafficTimeBinsIndex\"); \n",
							"en1 = OneHotEncoder(dropLast=False, inputCol=\"trafficTimeBinsIndex\", outputCol=\"trafficTimeBinsVec\");\n",
							"sI2 = StringIndexer(inputCol=\"weekdayString\", outputCol=\"weekdayIndex\"); \n",
							"en2 = OneHotEncoder(dropLast=False, inputCol=\"weekdayIndex\", outputCol=\"weekdayVec\");\n",
							"\n",
							"# Create a new dataframe that has had the encodings applied\n",
							"encoded_final_df = Pipeline(stages=[sI1, en1, sI2, en2]).fit(taxi_featurised_df).transform(taxi_featurised_df)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Generation of Testing and Training Data Sets\n",
							"Simple split, 70% for training and 30% for testing the model. Playing with this ratio may result in different models.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Decide on the split between training and testing data from the dataframe \n",
							"trainingFraction = 0.7\n",
							"testingFraction = (1-trainingFraction)\n",
							"seed = 1234\n",
							"\n",
							"# Split the dataframe into test and training dataframes\n",
							"train_data_df, test_data_df = encoded_final_df.randomSplit([trainingFraction, testingFraction], seed=seed)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Train the Model\n",
							"\n",
							"Train the Logistic Regression model and then evaluate it using Area under ROC as the metric."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"## Create a new LR object for the model\n",
							"logReg = LogisticRegression(maxIter=10, regParam=0.3, labelCol = 'tipped')\n",
							"\n",
							"## The formula for the model\n",
							"classFormula = RFormula(formula=\"tipped ~ pickupHour + weekdayVec + passengerCount + tripTimeSecs + tripDistance + fareAmount + paymentType+ trafficTimeBinsVec\")\n",
							"\n",
							"## Undertake training and create an LR model\n",
							"lrModel = Pipeline(stages=[classFormula, logReg]).fit(train_data_df)\n",
							"\n",
							"## Saving the model is optional but its another for of inter session cache\n",
							"datestamp = datetime.now().strftime('%m-%d-%Y-%s');\n",
							"fileName = \"lrModel_\" + datestamp;\n",
							"logRegDirfilename = fileName;\n",
							"lrModel.save(logRegDirfilename)\n",
							"\n",
							"## Predict tip 1/0 (yes/no) on the test dataset, evaluation using AUROC\n",
							"predictions = lrModel.transform(test_data_df)\n",
							"predictionAndLabels = predictions.select(\"label\",\"prediction\").rdd\n",
							"metrics = BinaryClassificationMetrics(predictionAndLabels)\n",
							"print(\"Area under ROC = %s\" % metrics.areaUnderROC)"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Evaluate and Visualize\n",
							"\n",
							"Plot the actual curve to develop a better understanding of the model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"## Plot the ROC curve, no need for pandas as this uses the modelSummary object\n",
							"modelSummary = lrModel.stages[-1].summary\n",
							"\n",
							"plt.plot([0, 1], [0, 1], 'r--')\n",
							"plt.plot(modelSummary.roc.select('FPR').collect(),\n",
							"         modelSummary.roc.select('TPR').collect())\n",
							"plt.xlabel('False Positive Rate')\n",
							"plt.ylabel('True Positive Rate')\n",
							"plt.show()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Low cost DW')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool2",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "6",
						"spark.autotune.trackingId": "fe4d50ff-a8df-409a-a5cf-a91cd6e86629"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/8bf7425c-d999-4803-81ab-9399a154b7d2/resourceGroups/Synapse_demo/providers/Microsoft.Synapse/workspaces/cmpnbnmosngz7ou2pocws1/bigDataPools/SparkPool2",
						"name": "SparkPool2",
						"type": "Spark",
						"endpoint": "https://cmpnbnmosngz7ou2pocws1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool2",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 60
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# Import NYC yellow cab data from Azure Open Datasets\r\n",
							"from azureml.opendatasets import NycTlcYellow\r\n",
							"\r\n",
							"from datetime import datetime\r\n",
							"from dateutil import parser\r\n",
							"\r\n",
							"end_date = parser.parse('2018-05-08 00:00:00')\r\n",
							"start_date = parser.parse('2018-05-01 00:00:00')\r\n",
							"\r\n",
							"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\r\n",
							"nyc_tlc_df = nyc_tlc.to_spark_dataframe()"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"nyc_tlc_df.show()"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"nyc_tlc_df.write.format(\"delta\").mode(\"overwrite\").save(\"abfss://public@cmpnbnmosngz7ou2poc.dfs.core.windows.net/Folder1\")"
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Part1-DeltaLake')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool2",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "6",
						"spark.autotune.trackingId": "c73b0391-d60e-443d-8bd7-9485b5ba43e6"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/8bf7425c-d999-4803-81ab-9399a154b7d2/resourceGroups/Synapse_demo/providers/Microsoft.Synapse/workspaces/cmpnbnmosngz7ou2pocws1/bigDataPools/SparkPool2",
						"name": "SparkPool2",
						"type": "Spark",
						"endpoint": "https://cmpnbnmosngz7ou2pocws1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool2",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Create a Delta file \r\n",
							"\r\n",
							"Provide the format as delta or parquet while creating the file.\r\n",
							"\r\n",
							"Below, we are providing the file path for loading the CSV file to delta"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"inputPath = 'abfss://public@cmpnbnmosngz7ou2poc.dfs.core.windows.net/inputfile'"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Reading the data into the dataframe. Providing the schema details and header as true for this CSV file.\r\n",
							"Read the data into a DataFrame. We supply the schema."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from pyspark.sql.types import StructType, StructField, DoubleType, IntegerType, StringType\r\n",
							"\r\n",
							"inputSchema = StructType([\r\n",
							"  StructField(\"InvoiceNo\", IntegerType(), True),\r\n",
							"  StructField(\"StockCode\", StringType(), True),\r\n",
							"  StructField(\"Description\", StringType(), True),\r\n",
							"  StructField(\"Quantity\", IntegerType(), True),\r\n",
							"  StructField(\"InvoiceDate\", StringType(), True),\r\n",
							"  StructField(\"UnitPrice\", DoubleType(), True),\r\n",
							"  StructField(\"CustomerID\", IntegerType(), True),\r\n",
							"  StructField(\"Country\", StringType(), True)\r\n",
							"])\r\n",
							"\r\n",
							"rawDataDF = (spark.read\r\n",
							"  .option(\"header\", \"false\")\r\n",
							"  .schema(inputSchema)\r\n",
							"  .csv(inputPath)\r\n",
							"            )"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"DataPath = 'abfss://public@cmpnbnmosngz7ou2poc.dfs.core.windows.net/deltafile'"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Provide the appropriate partition - below example partition on `Country` "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# write to Delta Lake\r\n",
							"rawDataDF.write.mode(\"overwrite\").format(\"delta\").partitionBy(\"Country\").save(DataPath)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Spark SQL queries can run directly on a directory of data, for delta use the following syntax: \r\n",
							"```\r\n",
							"SELECT * FROM delta.`/path/to/delta_directory`"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(spark.sql(\"SELECT * FROM delta.`{}` LIMIT 5\".format(DataPath)))"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### CREATE A Table Using Delta Lake\r\n",
							"\r\n",
							"Create a table called `customer_data_delta` using `DELTA` out of the above data.\r\n",
							"\r\n",
							"The notation is:\r\n",
							"> `CREATE TABLE <table-name>` <br>\r\n",
							"  `USING DELTA` <br>\r\n",
							"  `LOCATION <path-do-data> ` <br>\r\n",
							"  \r\n",
							"Note: Tables created with a specified `LOCATION` are considered unmanaged by the metastore. Unlike a managed table, where no path is specified, an unmanaged table’s files are not deleted when you `DROP` the table. However, changes to either the registered table or the files will be reflected in both locations.\r\n",
							"Since Delta Lake stores schema (and partition) info in the `_delta_log` directory, we do not have to specify partition columns!"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"spark.sql(\"\"\"\r\n",
							"  DROP TABLE IF EXISTS customer_data_delta\r\n",
							"\"\"\")\r\n",
							"spark.sql(\"\"\"\r\n",
							"  CREATE TABLE customer_data_delta\r\n",
							"  USING DELTA\r\n",
							"  LOCATION '{}'\r\n",
							"\"\"\".format(DataPath))"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"SELECT count(*) FROM customer_data_delta"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Get the metadata details of the table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"DESCRIBE DETAIL customer_data_delta"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"## Delta Lake Batch Operations - AppendDelta Lake Batch Operations - Append"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"miniDataInputPath = 'abfss://public@cmpnbnmosngz7ou2poc.dfs.core.windows.net/smallfile/new_data.csv'\r\n",
							"newDataDF = (spark\r\n",
							"  .read\r\n",
							"  .option(\"header\", \"true\")\r\n",
							"  .schema(inputSchema)\r\n",
							"  .csv(miniDataInputPath)\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(newDataDF)"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"newDataDF.count()"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"(newDataDF\r\n",
							"  .write\r\n",
							"  .format(\"delta\")\r\n",
							"  .partitionBy(\"Country\")\r\n",
							"  .mode(\"append\")\r\n",
							"  .save(DataPath)\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"SELECT count(*) FROM customer_data_delta"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##  Upsert into delta lake\r\n",
							"\r\n",
							"Can't upsert in parquet files.\r\n",
							"Using Delta Lake, we can do UPSERTS. Delta Lake combines these operations to guarantee atomicity to\r\n",
							"- INSERT a row \r\n",
							"- if the row already exists, UPDATE the row."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"upsertPath = 'abfss://public@cmpnbnmosngz7ou2poc.dfs.core.windows.net/upsertfile'\r\n",
							"\r\n",
							"upsertDF = spark.read.format(\"json\").load(upsertPath)\r\n",
							"display(upsertDF)"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"upsertDF.createOrReplaceTempView(\"upsert_data\")"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"In this upsert\r\n",
							"- Adding new records for customer 20993\r\n",
							"- Updating 'Country' column for customer 20993 to Iceland\r\n",
							"- Updates to 'Description' column for StockCode 22837 "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"MERGE INTO customer_data_delta\r\n",
							"USING upsert_data\r\n",
							"ON customer_data_delta.InvoiceNo = upsert_data.InvoiceNo\r\n",
							"  AND customer_data_delta.StockCode = upsert_data.StockCode\r\n",
							"WHEN MATCHED THEN\r\n",
							"  UPDATE SET *\r\n",
							"WHEN NOT MATCHED\r\n",
							"  THEN INSERT *"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"SELECT * FROM customer_data_delta WHERE CustomerID=20993"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"SELECT DISTINCT(Description) \r\n",
							"FROM customer_data_delta \r\n",
							"WHERE StockCode = 22837"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"select  * from customer_data_delta "
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"update customer_data_delta\r\n",
							"set Description = 'xxx08'\r\n",
							"WHERE StockCode = 22837"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"\r\n",
							"%%sql\r\n",
							"update customer_data_delta\r\n",
							"set Description = 'xxx07'\r\n",
							"WHERE StockCode = 22577"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"\r\n",
							"%%sql\r\n",
							"update customer_data_delta\r\n",
							"set Description = 'xxx09'\r\n",
							"WHERE StockCode = 20914"
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"update customer_data_delta\r\n",
							"set Description = 'xxx10'\r\n",
							"WHERE StockCode = 20914"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"update customer_data_delta\r\n",
							"set Description = 'xxx11'\r\n",
							"WHERE StockCode = 20914"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"\r\n",
							"val df = spark.read\r\n",
							"  .format(\"delta\")\r\n",
							"  .option(\"timestampAsOf\", \"1652955732419\")\r\n",
							"  .load(DataPath)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							}
						},
						"source": [
							"%%sql\r\n",
							"SELECT count(*) FROM customer_data_delta TIMESTAMP AS OF \"1652955732419\""
						],
						"outputs": [],
						"execution_count": 35
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cmpnbnmosngz7ou2pocws1p1')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "uksouth"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ws1sparkpool1')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 40,
					"minNodeCount": 3
				},
				"nodeCount": 5,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "2.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "uksouth"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkPool2')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 60
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 14,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.2",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "uksouth"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TestReactor')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 0,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.2",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "uksouth"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SampleSpark')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.2",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "uksouth"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks",
			"apiVersion": "2019-06-01-preview",
			"properties": {},
			"dependsOn": []
		}
	]
}